# ===================================================================
# FaaS Offloading Simulator
# Configuration file for automated experiments
# -------------------------------------------------------------------
# Use this file to set the parameters for the experiments you wish to
# run, then run experiments.py.old in order to run them. The script
# will programmatically generate the desired configurations and run
# the experiments, according to what you specify in this file.
# ===================================================================

[experiment]
name = bayesopt-params-tuning

# Execution modes - the experiments are run in two phases:
#
# 1. simulations
#    the simulator is run with the specified parameters, and
#    statistics are produced
#
# 2. post-processing
#    some post-processing is done with the statistics produced in
#    the previous stage
# 
# Options available for each phase:
#   - none					(simply don't run the phase)
#   - automated				(run the phase in an automated way, according to the parameters)
#   - (a different value)	(specify a relative path of a custom Python script that will be run for the phase)
mode-simulations = custom-bayes-sim.py
mode-postprocessing = none

[output]
# Specify the policy to be adopted with the output (statistics) of the experiments.
# Options available:
#   - no			(do not run any experiment, just use already produced stats files)
#   - skip-existent	(run experiment only if stat files are not available/readable for a specific combination)
#   - always		(run and overwrite in every case)
run-duplicates = skip-existent

[strategies]
# UCB strategies to be run in the experiments.
# (multiple values, comma-separated, are admissible)
# Options available:
#	- UCB2
#	- UCBTuned
#	- KL-UCB
strategies = UCBTuned, UCB2, KL-UCB

[parameters]
# Parameters for the executions
# For iterable parameters please specify all of the following (up to three decimals):
#   - param-name-start
#   - param-name-step
#   - param-name-end

objfn-stabilizations-iterations=1
rand-points=1
iterations=1

ef-lower=0
ef-upper=1

ucb2-alpha-lower=0.01
ucb2-alpha-upper=0.99

klucb-c-lower=0
klucb-c-upper=10

[reward_fn]
# Specify the "axis" (i.e., the reward fn. parameters weights) that will be alternately put to 1.
# "axis_post" may differ from "axis_pre" if you want to try to change the reward function after a while.
# (multiple values, comma-separated, are admissible)
# Options available:
#	- load_imb 		(i.e., alpha)
#	- rt			(i.e., beta)
#	- cost			(i.e., gamma)
#	- utility		(i.e., delta)
#	- violations	(i.e., zeta)
axis_pre = load_imb
#, rt, cost, utility, violations
axis_post= load_imb
#, rt, cost, utility, violations
# TODO il tempo a cui cambiare la funzione
